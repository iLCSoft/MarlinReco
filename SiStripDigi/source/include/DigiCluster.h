#ifndef DIGICLUSTER_H
#define DIGICLUSTER_H 1

#include "PhysicalConstants.h"

// Include CLHEP header files
#include <CLHEP/Vector/ThreeVector.h>

// Include LCIO header files
#include <lcio.h>
#include <EVENT/MCParticle.h>
#include <EVENT/SimTrackerHit.h>

/**
\addtogroup SiStripDigi SiStripDigi
@{
*/

namespace sistrip {

//! Digitization cluster class. One cluster represents a bunch of either
//! electrons or holes created by ionizing particle, where the number of
//! charge carriers is proportional to the deposited energy by the particle.
//! Energy necessary for creation of one e-h pair is defined in header file
//! PhysicalConstants.h
//!
//! @author Z. Drasal, Charles University Prague
//!

class DigiCluster {

 public:

//!Constructor
   DigiCluster();

//!Constructor setting charge, number of carriers, position, sensor ID and wafer ID
	DigiCluster(short int charge, float time, float depE, CLHEP::Hep3Vector position,
	            short int iLayer, short int iLadder, short int iSensor, int cellID,
	            EVENT::MCParticle * mcPart, EVENT::SimTrackerHit * simHit) :
	               _time(time), _charge(charge)  , _iLayer(iLayer),
	               _iLadder(iLadder), _iSensor(iSensor), _iCell(cellID)
	            { _nCarriers = depE/Eeh; _position = position; _MCPart = mcPart; _simHit = simHit;}

//!Destructor
	~DigiCluster();


// SET METHODS

//!Set cluster position X
   inline void setPosX(double posX) {_position.setX(posX);}

//!Set cluster position Y
   inline void setPosY(double posY) {_position.setY(posY);}

//!Set cluster position Z
   inline void setPosZ(double posZ) {_position.setZ(posZ);}

//!Set cluster position Three vector
   void set3Position(const CLHEP::Hep3Vector & position);

//!Set cluster velocity X
   inline void setVelX(double velX) {_velocity.setX(velX);}

//!Set cluster velocity Y
   inline void setVelY(double velY) {_velocity.setY(velY);}

//!Set cluster velocity Z
   inline void setVelZ(double velZ) {_velocity.setZ(velZ);}

//!Set cluster velocity Three vector
   void set3Velocity(const CLHEP::Hep3Vector & velocity);

//!Set time when the cluster has been generated by a particle
	inline void setTime(float time) { _time = time;}

//!Set cluster total drift time
   inline void setDriftTime(double driftTime) {_driftTime = driftTime;}

//!Set cluster total diffusion sigma
   inline void setDiffSigma(double diffSigma) {_diffSigma = diffSigma;}

//!Set cluster charge
   inline void setCharge(short int charge) {_charge = charge;}

//!Set number of charge carriers
   inline void setNCarriers(float depEnergy) {_nCarriers = depEnergy/Eeh;}

//!Set layer ID
   inline void setLayerID(short int iLayer) {_iLayer = iLayer;}

//!Set ladder ID
   inline void setLadderID(short int iLadder) {_iLadder = iLadder;}

//!Set sensor ID
	inline void setSensorID(short int iSensor) {_iSensor = iSensor;}

//!Set cell ID
	inline void setCellID(int cellID){_iCell = cellID;}

//!Set pointer to MCParticle
	inline void setMCParticle(EVENT::MCParticle * mcPart){_MCPart = mcPart;}

//!Set pointer to SimTrackerHit
   inline void setSimTrackerHit(EVENT::SimTrackerHit * simHit){_simHit = simHit;}


// GET METHODS

//!Get cluster position X
   inline double getPosX() const {return _position.getX();}

//!Get cluster position Y
   inline double getPosY() const {return _position.getY();}

//!Get cluster position Z
   inline double getPosZ() const {return _position.getZ();}

//!Get cluster position Three vector
   inline CLHEP::Hep3Vector get3Position() const {return _position;}

//!Get cluster velocity X
   inline double getVelX() const {return _velocity.getX();}

//!Get cluster velocity Y
   inline double getVelY() const {return _velocity.getY();}

//!Get cluster velocity Z
   inline double getVelZ() const {return _velocity.getZ();}

//!Get cluster velocity Three vector
   inline CLHEP::Hep3Vector get3Velocity() const {return _velocity;}

//!Get time when the cluster has been generated by a particle
	inline float getTime() const {return _time;}

//!Get cluster total drift time
   inline double getDriftTime() const {return _driftTime;}

//!Get cluster total diffusion sigma
	inline double getDiffSigma() const {return _diffSigma;}

//!Get cluster charge
   inline short int getCharge() const {return _charge;}

//!Get number of charge carriers
   inline int getNCarriers() const {return _nCarriers;}

//!Get layer ID
   inline short int getLayerID() const {return _iLayer;}

//!Get ladder ID
   inline short int getLadderID() const {return _iLadder;}

//!Get sensor ID
	inline short int getSensorID() const {return _iSensor;}

//!Get cell ID
	inline int getCellID() const {return _iCell;}

//!Get pointer to MCParticle which has created given cluster
	inline EVENT::MCParticle * getMCParticle() const {return _MCPart;}

//!Get pointer to SimTrackerHit from which the given cluster has been created
   inline EVENT::SimTrackerHit * getSimTrackerHit() const {return _simHit;}

 protected:

   CLHEP::Hep3Vector _position;   //!<Cluster position in cm
   CLHEP::Hep3Vector _velocity;   //!<Cluster velocity in cm/s
   float      _time;              //!<Time when the cluster has been generated by a particle in s
   double     _driftTime;         //!<Cluster total drift time in s
   double     _diffSigma;         //!<Cluster total diffusion sigma in cm
   short int  _charge;            //!<Cluster charge (e cluster = -1; h cluster = +1)
   int        _nCarriers;         //!<Number of charge carriers, i.e. electrons, resp. holes

   short int  _iLayer;            //!<ID number of a layer
   short int  _iLadder;           //!<ID number of a ladder
   short int  _iSensor;           //!<ID number of a sensor
   int        _iCell;             //!<ID number of layer+ladder+sensor - encoded into one number

   EVENT::MCParticle * _MCPart;   //!<Monte Carlo particle which has created cluster signal
   EVENT::SimTrackerHit * _simHit;//!<SimTrackerHit from which the cluster signal has been created

}; // Class

} // Namespace

/** @} */

#endif // DIGICLUSTER_H
